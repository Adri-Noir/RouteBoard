// This file is auto-generated by @hey-api/openapi-ts

import { infiniteQueryOptions, queryOptions, type InfiniteData, type UseMutationOptions } from "@tanstack/react-query";
import { client as _heyApiClient } from "../client.gen";
import {
  getApiCragById,
  getApiMapExplore,
  getApiMapGlobeSectorsByCragId,
  getApiMapWeatherByCragId,
  getApiRouteById,
  getApiSectorById,
  getApiSectorSectorCragById,
  getApiUserRecentlyAscendedRoutes,
  getApiUserSearchHistory,
  getApiUserUserByProfileUserId,
  postAddPhoto,
  postApiAuthenticationAuthenticated,
  postApiAuthenticationLogin,
  postApiAuthenticationMe,
  postApiAuthenticationRegister,
  postApiCrag,
  postApiMapGlobe,
  postApiRoute,
  postApiSearch,
  postApiSector,
  postApiUserLogAscent,
  type Options,
} from "../sdk.gen";
import type {
  GetApiCragByIdData,
  GetApiMapExploreData,
  GetApiMapGlobeSectorsByCragIdData,
  GetApiMapWeatherByCragIdData,
  GetApiRouteByIdData,
  GetApiSectorByIdData,
  GetApiSectorSectorCragByIdData,
  GetApiUserRecentlyAscendedRoutesData,
  GetApiUserSearchHistoryData,
  GetApiUserUserByProfileUserIdData,
  PostAddPhotoData,
  PostAddPhotoError,
  PostApiAuthenticationAuthenticatedData,
  PostApiAuthenticationAuthenticatedError,
  PostApiAuthenticationLoginData,
  PostApiAuthenticationLoginError,
  PostApiAuthenticationLoginResponse,
  PostApiAuthenticationMeData,
  PostApiAuthenticationMeError,
  PostApiAuthenticationMeResponse,
  PostApiAuthenticationRegisterData,
  PostApiAuthenticationRegisterError,
  PostApiAuthenticationRegisterResponse,
  PostApiCragData,
  PostApiCragError,
  PostApiCragResponse,
  PostApiMapGlobeData,
  PostApiMapGlobeError,
  PostApiMapGlobeResponse,
  PostApiRouteData,
  PostApiRouteError,
  PostApiRouteResponse,
  PostApiSearchData,
  PostApiSearchError,
  PostApiSearchResponse,
  PostApiSectorData,
  PostApiSectorError,
  PostApiSectorResponse,
  PostApiUserLogAscentData,
  PostApiUserLogAscentError,
} from "../types.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const postApiAuthenticationLoginQueryKey = (options?: Options<PostApiAuthenticationLoginData>) =>
  createQueryKey("postApiAuthenticationLogin", options);

export const postApiAuthenticationLoginOptions = (options?: Options<PostApiAuthenticationLoginData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthenticationLogin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthenticationLoginQueryKey(options),
  });
};

export const postApiAuthenticationLoginMutation = (options?: Partial<Options<PostApiAuthenticationLoginData>>) => {
  const mutationOptions: UseMutationOptions<
    PostApiAuthenticationLoginResponse,
    PostApiAuthenticationLoginError,
    Options<PostApiAuthenticationLoginData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationLogin({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiAuthenticationRegisterQueryKey = (options: Options<PostApiAuthenticationRegisterData>) =>
  createQueryKey("postApiAuthenticationRegister", options);

export const postApiAuthenticationRegisterOptions = (options: Options<PostApiAuthenticationRegisterData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthenticationRegister({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthenticationRegisterQueryKey(options),
  });
};

export const postApiAuthenticationRegisterMutation = (
  options?: Partial<Options<PostApiAuthenticationRegisterData>>,
) => {
  const mutationOptions: UseMutationOptions<
    PostApiAuthenticationRegisterResponse,
    PostApiAuthenticationRegisterError,
    Options<PostApiAuthenticationRegisterData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationRegister({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiAuthenticationAuthenticatedQueryKey = (options?: Options<PostApiAuthenticationAuthenticatedData>) =>
  createQueryKey("postApiAuthenticationAuthenticated", options);

export const postApiAuthenticationAuthenticatedOptions = (
  options?: Options<PostApiAuthenticationAuthenticatedData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthenticationAuthenticated({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthenticationAuthenticatedQueryKey(options),
  });
};

export const postApiAuthenticationAuthenticatedMutation = (
  options?: Partial<Options<PostApiAuthenticationAuthenticatedData>>,
) => {
  const mutationOptions: UseMutationOptions<
    unknown,
    PostApiAuthenticationAuthenticatedError,
    Options<PostApiAuthenticationAuthenticatedData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationAuthenticated({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiAuthenticationMeQueryKey = (options?: Options<PostApiAuthenticationMeData>) =>
  createQueryKey("postApiAuthenticationMe", options);

export const postApiAuthenticationMeOptions = (options?: Options<PostApiAuthenticationMeData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAuthenticationMe({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAuthenticationMeQueryKey(options),
  });
};

export const postApiAuthenticationMeMutation = (options?: Partial<Options<PostApiAuthenticationMeData>>) => {
  const mutationOptions: UseMutationOptions<
    PostApiAuthenticationMeResponse,
    PostApiAuthenticationMeError,
    Options<PostApiAuthenticationMeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAuthenticationMe({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiCragByIdQueryKey = (options: Options<GetApiCragByIdData>) =>
  createQueryKey("getApiCragById", options);

export const getApiCragByIdOptions = (options: Options<GetApiCragByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiCragById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiCragByIdQueryKey(options),
  });
};

export const postApiCragQueryKey = (options?: Options<PostApiCragData>) => createQueryKey("postApiCrag", options);

export const postApiCragOptions = (options?: Options<PostApiCragData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiCrag({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiCragQueryKey(options),
  });
};

export const postApiCragMutation = (options?: Partial<Options<PostApiCragData>>) => {
  const mutationOptions: UseMutationOptions<PostApiCragResponse, PostApiCragError, Options<PostApiCragData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiCrag({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiMapExploreQueryKey = (options?: Options<GetApiMapExploreData>) =>
  createQueryKey("getApiMapExplore", options);

export const getApiMapExploreOptions = (options?: Options<GetApiMapExploreData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiMapExplore({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiMapExploreQueryKey(options),
  });
};

export const getApiMapWeatherByCragIdQueryKey = (options: Options<GetApiMapWeatherByCragIdData>) =>
  createQueryKey("getApiMapWeatherByCragId", options);

export const getApiMapWeatherByCragIdOptions = (options: Options<GetApiMapWeatherByCragIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiMapWeatherByCragId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiMapWeatherByCragIdQueryKey(options),
  });
};

export const postApiMapGlobeQueryKey = (options?: Options<PostApiMapGlobeData>) =>
  createQueryKey("postApiMapGlobe", options);

export const postApiMapGlobeOptions = (options?: Options<PostApiMapGlobeData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiMapGlobe({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiMapGlobeQueryKey(options),
  });
};

export const postApiMapGlobeMutation = (options?: Partial<Options<PostApiMapGlobeData>>) => {
  const mutationOptions: UseMutationOptions<
    PostApiMapGlobeResponse,
    PostApiMapGlobeError,
    Options<PostApiMapGlobeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiMapGlobe({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiMapGlobeSectorsByCragIdQueryKey = (options: Options<GetApiMapGlobeSectorsByCragIdData>) =>
  createQueryKey("getApiMapGlobeSectorsByCragId", options);

export const getApiMapGlobeSectorsByCragIdOptions = (options: Options<GetApiMapGlobeSectorsByCragIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiMapGlobeSectorsByCragId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiMapGlobeSectorsByCragIdQueryKey(options),
  });
};

export const getApiRouteByIdQueryKey = (options: Options<GetApiRouteByIdData>) =>
  createQueryKey("getApiRouteById", options);

export const getApiRouteByIdOptions = (options: Options<GetApiRouteByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiRouteById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiRouteByIdQueryKey(options),
  });
};

export const postApiRouteQueryKey = (options?: Options<PostApiRouteData>) => createQueryKey("postApiRoute", options);

export const postApiRouteOptions = (options?: Options<PostApiRouteData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiRoute({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiRouteQueryKey(options),
  });
};

export const postApiRouteMutation = (options?: Partial<Options<PostApiRouteData>>) => {
  const mutationOptions: UseMutationOptions<PostApiRouteResponse, PostApiRouteError, Options<PostApiRouteData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiRoute({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postAddPhotoQueryKey = (options: Options<PostAddPhotoData>) => createQueryKey("postAddPhoto", options);

export const postAddPhotoOptions = (options: Options<PostAddPhotoData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postAddPhoto({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postAddPhotoQueryKey(options),
  });
};

export const postAddPhotoMutation = (options?: Partial<Options<PostAddPhotoData>>) => {
  const mutationOptions: UseMutationOptions<unknown, PostAddPhotoError, Options<PostAddPhotoData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await postAddPhoto({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiSearchQueryKey = (options?: Options<PostApiSearchData>) => createQueryKey("postApiSearch", options);

export const postApiSearchOptions = (options?: Options<PostApiSearchData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiSearch({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiSearchQueryKey(options),
  });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], "body" | "headers" | "path" | "query">>(
  queryKey: QueryKey<Options>,
  page: K,
) => {
  const params = queryKey[0];
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    };
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    };
  }
  if (page.path) {
    params.path = {
      ...(queryKey[0].path as any),
      ...(page.path as any),
    };
  }
  if (page.query) {
    params.query = {
      ...(queryKey[0].query as any),
      ...(page.query as any),
    };
  }
  return params as unknown as typeof page;
};

export const postApiSearchInfiniteQueryKey = (
  options?: Options<PostApiSearchData>,
): QueryKey<Options<PostApiSearchData>> => createQueryKey("postApiSearch", options, true);

export const postApiSearchInfiniteOptions = (options?: Options<PostApiSearchData>) => {
  return infiniteQueryOptions<
    PostApiSearchResponse,
    PostApiSearchError,
    InfiniteData<PostApiSearchResponse>,
    QueryKey<Options<PostApiSearchData>>,
    number | Pick<QueryKey<Options<PostApiSearchData>>[0], "body" | "headers" | "path" | "query">
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<QueryKey<Options<PostApiSearchData>>[0], "body" | "headers" | "path" | "query"> =
          typeof pageParam === "object"
            ? pageParam
            : {
                body: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await postApiSearch({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: postApiSearchInfiniteQueryKey(options),
    },
  );
};

export const postApiSearchMutation = (options?: Partial<Options<PostApiSearchData>>) => {
  const mutationOptions: UseMutationOptions<PostApiSearchResponse, PostApiSearchError, Options<PostApiSearchData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiSearch({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiSectorQueryKey = (options: Options<PostApiSectorData>) => createQueryKey("postApiSector", options);

export const postApiSectorOptions = (options: Options<PostApiSectorData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiSector({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiSectorQueryKey(options),
  });
};

export const postApiSectorMutation = (options?: Partial<Options<PostApiSectorData>>) => {
  const mutationOptions: UseMutationOptions<PostApiSectorResponse, PostApiSectorError, Options<PostApiSectorData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiSector({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiSectorByIdQueryKey = (options: Options<GetApiSectorByIdData>) =>
  createQueryKey("getApiSectorById", options);

export const getApiSectorByIdOptions = (options: Options<GetApiSectorByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiSectorById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiSectorByIdQueryKey(options),
  });
};

export const getApiSectorSectorCragByIdQueryKey = (options: Options<GetApiSectorSectorCragByIdData>) =>
  createQueryKey("getApiSectorSectorCragById", options);

export const getApiSectorSectorCragByIdOptions = (options: Options<GetApiSectorSectorCragByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiSectorSectorCragById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiSectorSectorCragByIdQueryKey(options),
  });
};

export const postApiUserLogAscentQueryKey = (options?: Options<PostApiUserLogAscentData>) =>
  createQueryKey("postApiUserLogAscent", options);

export const postApiUserLogAscentOptions = (options?: Options<PostApiUserLogAscentData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiUserLogAscent({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiUserLogAscentQueryKey(options),
  });
};

export const postApiUserLogAscentMutation = (options?: Partial<Options<PostApiUserLogAscentData>>) => {
  const mutationOptions: UseMutationOptions<unknown, PostApiUserLogAscentError, Options<PostApiUserLogAscentData>> = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiUserLogAscent({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiUserSearchHistoryQueryKey = (options?: Options<GetApiUserSearchHistoryData>) =>
  createQueryKey("getApiUserSearchHistory", options);

export const getApiUserSearchHistoryOptions = (options?: Options<GetApiUserSearchHistoryData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUserSearchHistory({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUserSearchHistoryQueryKey(options),
  });
};

export const getApiUserRecentlyAscendedRoutesQueryKey = (options?: Options<GetApiUserRecentlyAscendedRoutesData>) =>
  createQueryKey("getApiUserRecentlyAscendedRoutes", options);

export const getApiUserRecentlyAscendedRoutesOptions = (options?: Options<GetApiUserRecentlyAscendedRoutesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUserRecentlyAscendedRoutes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUserRecentlyAscendedRoutesQueryKey(options),
  });
};

export const getApiUserUserByProfileUserIdQueryKey = (options: Options<GetApiUserUserByProfileUserIdData>) =>
  createQueryKey("getApiUserUserByProfileUserId", options);

export const getApiUserUserByProfileUserIdOptions = (options: Options<GetApiUserUserByProfileUserIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUserUserByProfileUserId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUserUserByProfileUserIdQueryKey(options),
  });
};
