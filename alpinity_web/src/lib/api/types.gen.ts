// This file is auto-generated by @hey-api/openapi-ts

export type AscentCountDto = {
  ascentType?: AscentType;
  count?: number;
};

export type AscentDto = {
  id?: string;
  ascentDate?: string | null;
  notes?: string | null;
  climbTypes?: Array<ClimbType> | null;
  rockTypes?: Array<RockType> | null;
  holdTypes?: Array<HoldType> | null;
  ascentType?: AscentType;
  numberOfAttempts?: number | null;
  proposedGrade?: ClimbingGrade;
  rating?: number | null;
  userId?: string;
  username?: string | null;
  userProfilePhotoUrl?: string | null;
};

export type AscentType = "Onsight" | "Flash" | "Redpoint" | "Aid";

export type ClimbType = "Endurance" | "Powerful" | "Technical";

export type ClimbingGrade =
  | "F_1"
  | "F_2"
  | "F_3"
  | "F_4a"
  | "F_4b"
  | "F_4c"
  | "F_5a"
  | "F_5b"
  | "F_5c"
  | "F_6a"
  | "F_6a_plus"
  | "F_6b"
  | "F_6b_plus"
  | "F_6c"
  | "F_6c_plus"
  | "F_7a"
  | "F_7a_plus"
  | "F_7b"
  | "F_7b_plus"
  | "F_7c"
  | "F_7c_plus"
  | "F_8a"
  | "F_8a_plus"
  | "F_8b"
  | "F_8b_plus"
  | "F_8c"
  | "F_8c_plus"
  | "F_9a"
  | "F_9a_plus"
  | "F_9b"
  | "F_9b_plus"
  | "F_9c"
  | "F_9c_plus"
  | "F_10a"
  | "PROJECT";

export type ClimbingGradeAscentCountDto = {
  routeType?: RouteType;
  gradeCount?: Array<GradeCountDto> | null;
};

export type CragDetailedDto = {
  id?: string;
  name?: string | null;
  description?: string | null;
  location?: PointDto;
  locationName?: string | null;
  sectors?: Array<CragSectorDto> | null;
  photos?: Array<PhotoDto> | null;
};

export type CragSectorDto = {
  id: string;
  name: string | null;
  description?: string | null;
  location?: PointDto;
  photos?: Array<PhotoDto> | null;
  routesCount?: number;
};

export type CreateCragCommand = {
  name: string | null;
  description?: string | null;
  location?: PointDto;
};

export type CreateRouteCommand = {
  name: string | null;
  description?: string | null;
  grade?: ClimbingGrade;
  routeType?: Array<RouteType> | null;
  length?: number | null;
  sectorId: string;
};

export type CurrentWeatherDto = {
  time?: string | null;
  interval?: number;
  temperature2m?: number;
  relativeHumidity2m?: number;
  windSpeed10m?: number;
  windDirection10m?: number;
  weatherCode?: number;
};

export type DailyWeatherDto = {
  date?: string | null;
  weatherCode?: number;
  temperature2mMax?: number;
  temperature2mMin?: number;
  apparentTemperatureMax?: number;
  apparentTemperatureMin?: number;
  sunrise?: string | null;
  sunset?: string | null;
  uvIndexMax?: number;
  precipitationSum?: number;
  precipitationProbabilityMax?: number;
  windSpeed10mMax?: number;
  windDirection10mDominant?: number;
};

export type ExploreDto = {
  id: string;
  cragId?: string | null;
  cragName?: string | null;
  cragDescription?: string | null;
  location?: PointDto;
  locationName?: string | null;
  photo?: PhotoDto;
  sectorsCount?: number | null;
  routesCount?: number | null;
  ascentsCount?: number | null;
};

export type GradeCountDto = {
  climbingGrade?: ClimbingGrade;
  count?: number;
};

export type HoldType = "Crack" | "Crimps" | "Slopers" | "Pinches" | "Jugs" | "Pockets";

export type HourlyWeatherDto = {
  time?: string | null;
  temperature2m?: number;
  relativeHumidity2m?: number;
  rain?: number;
  weatherCode?: number;
  windSpeed10m?: number;
  windDirection10m?: number;
  precipitationProbability?: number;
};

export type LogAscentCommand = {
  routeId: string;
  ascentDate?: string;
  notes?: string | null;
  climbTypes?: Array<ClimbType> | null;
  rockTypes?: Array<RockType> | null;
  holdTypes?: Array<HoldType> | null;
  ascentType?: AscentType;
  numberOfAttempts?: number | null;
  proposedGrade?: ClimbingGrade;
  rating?: number | null;
};

export type LoggedInUserDto = {
  id: string;
  email: string | null;
  username: string | null;
  profilePhotoUrl?: string | null;
  role?: number;
  token?: string | null;
};

export type LoginCommand = {
  emailOrUsername: string | null;
  password: string | null;
};

export type PhotoDto = {
  id: string;
  description?: string | null;
  url: string | null;
  takenAt?: string | null;
  takenByUser?: UserDto;
};

export type PointDto = {
  latitude: number;
  longitude: number;
};

export type ProblemDetails = {
  type?: string | null;
  title?: string | null;
  status?: number | null;
  detail?: string | null;
  instance?: string | null;
  [key: string]:
    | unknown
    | (string | null)
    | (string | null)
    | (number | null)
    | (string | null)
    | (string | null)
    | undefined;
};

export type RecentlyAscendedRouteDto = {
  id: string;
  name: string | null;
  description?: string | null;
  grade?: ClimbingGrade;
  length?: number | null;
  sectorId: string;
  sectorName: string | null;
  cragId: string;
  cragName: string | null;
  routePhotos?: Array<RoutePhotoDto> | null;
  ascentsCount?: number;
};

export type RockType = "Vertical" | "Overhang" | "Roof" | "Slab" | "Arete" | "Dihedral";

export type RouteDetailedDto = {
  id: string;
  name: string | null;
  description?: string | null;
  grade?: ClimbingGrade;
  createdAt?: string | null;
  routeType?: Array<RouteType> | null;
  length?: number | null;
  sectorId: string;
  sectorName: string | null;
  cragId: string;
  cragName: string | null;
  routePhotos?: Array<RoutePhotoDto> | null;
  ascents?: Array<AscentDto> | null;
};

export type RoutePhotoDto = {
  id: string;
  routeId?: string;
  image?: PhotoDto;
  pathLine?: PhotoDto;
};

export type RouteType =
  | "Boulder"
  | "Sport"
  | "Trad"
  | "MultiPitch"
  | "Ice"
  | "BigWall"
  | "Mixed"
  | "Aid"
  | "ViaFerrata";

export type RouteTypeAscentCountDto = {
  routeType?: RouteType;
  ascentCount?: Array<AscentCountDto> | null;
};

export type SearchQueryCommand = {
  query: string | null;
  page?: number;
  pageSize?: number;
};

export type SearchResultDto = {
  id?: string;
  entityType?: SearchResultItemType;
  cragLocation?: PointDto;
  cragId?: string | null;
  cragName?: string | null;
  cragRoutesCount?: number | null;
  cragSectorsCount?: number | null;
  sectorName?: string | null;
  sectorId?: string | null;
  sectorCragId?: string | null;
  sectorCragName?: string | null;
  sectorRoutesCount?: number | null;
  routeId?: string | null;
  routeDifficulty?: ClimbingGrade;
  routeName?: string | null;
  routeAscentsCount?: number | null;
  routeSectorId?: string | null;
  routeSectorName?: string | null;
  routeCragId?: string | null;
  routeCragName?: string | null;
  profileUserId?: string | null;
  profileUsername?: string | null;
};

export type SearchResultItemType = "Crag" | "Sector" | "Route" | "UserProfile";

export type SectorDetailedDto = {
  id: string;
  name: string | null;
  description?: string | null;
  location?: PointDto;
  photos?: Array<PhotoDto> | null;
  routes?: Array<SectorRouteDto> | null;
  cragId?: string;
  cragName?: string | null;
};

export type SectorRouteDto = {
  id: string;
  name: string | null;
  description?: string | null;
  grade?: ClimbingGrade;
  createdAt?: string | null;
  routeType?: Array<RouteType> | null;
  length?: number | null;
  routePhotos?: Array<RoutePhotoDto> | null;
  ascentsCount?: number | null;
};

export type UserDto = {
  id?: string;
  username?: string | null;
  email?: string | null;
  firstName?: string | null;
  lastName?: string | null;
  dateOfBirth?: string | null;
  createdAt?: string | null;
  profilePhotoUrl?: string | null;
};

export type UserProfileDto = {
  id?: string;
  username?: string | null;
  email?: string | null;
  firstName?: string | null;
  lastName?: string | null;
  profilePhotoUrl?: string | null;
  cragsVisited?: number | null;
  routeTypeAscentCount?: Array<RouteTypeAscentCountDto> | null;
  climbingGradeAscentCount?: Array<ClimbingGradeAscentCountDto> | null;
  photos?: Array<PhotoDto> | null;
};

export type WeatherResponseDto = {
  current?: CurrentWeatherDto;
  hourly?: Array<HourlyWeatherDto> | null;
  daily?: Array<DailyWeatherDto> | null;
};

export type PostApiAuthenticationLoginData = {
  body?: LoginCommand;
  path?: never;
  query?: never;
  url: "/api/Authentication/login";
};

export type PostApiAuthenticationLoginErrors = {
  /**
   * Bad Request
   */
  400: ProblemDetails;
  /**
   * Unauthorized
   */
  401: ProblemDetails;
};

export type PostApiAuthenticationLoginError = PostApiAuthenticationLoginErrors[keyof PostApiAuthenticationLoginErrors];

export type PostApiAuthenticationLoginResponses = {
  /**
   * OK
   */
  200: LoggedInUserDto;
};

export type PostApiAuthenticationLoginResponse =
  PostApiAuthenticationLoginResponses[keyof PostApiAuthenticationLoginResponses];

export type PostApiAuthenticationRegisterData = {
  body?: {
    ProfilePhoto?: Blob | File;
  };
  path?: never;
  query: {
    Email: string;
    Username: string;
    Password: string;
    FirstName?: string;
    LastName?: string;
    DateOfBirth?: string;
    NormalizedEmail?: string;
  };
  url: "/api/Authentication/register";
};

export type PostApiAuthenticationRegisterErrors = {
  /**
   * Bad Request
   */
  400: ProblemDetails;
  /**
   * Unauthorized
   */
  401: ProblemDetails;
  /**
   * Conflict
   */
  409: ProblemDetails;
};

export type PostApiAuthenticationRegisterError =
  PostApiAuthenticationRegisterErrors[keyof PostApiAuthenticationRegisterErrors];

export type PostApiAuthenticationRegisterResponses = {
  /**
   * OK
   */
  200: LoggedInUserDto;
};

export type PostApiAuthenticationRegisterResponse =
  PostApiAuthenticationRegisterResponses[keyof PostApiAuthenticationRegisterResponses];

export type PostApiAuthenticationAuthenticatedData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/Authentication/authenticated";
};

export type PostApiAuthenticationAuthenticatedErrors = {
  /**
   * Bad Request
   */
  400: ProblemDetails;
  /**
   * Unauthorized
   */
  401: ProblemDetails;
};

export type PostApiAuthenticationAuthenticatedError =
  PostApiAuthenticationAuthenticatedErrors[keyof PostApiAuthenticationAuthenticatedErrors];

export type PostApiAuthenticationAuthenticatedResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type PostApiAuthenticationMeData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/Authentication/me";
};

export type PostApiAuthenticationMeErrors = {
  /**
   * Bad Request
   */
  400: ProblemDetails;
  /**
   * Unauthorized
   */
  401: ProblemDetails;
};

export type PostApiAuthenticationMeError = PostApiAuthenticationMeErrors[keyof PostApiAuthenticationMeErrors];

export type PostApiAuthenticationMeResponses = {
  /**
   * OK
   */
  200: LoggedInUserDto;
};

export type PostApiAuthenticationMeResponse = PostApiAuthenticationMeResponses[keyof PostApiAuthenticationMeResponses];

export type GetApiCragByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/Crag/{id}";
};

export type GetApiCragByIdErrors = {
  /**
   * Bad Request
   */
  400: ProblemDetails;
  /**
   * Unauthorized
   */
  401: ProblemDetails;
  /**
   * Not Found
   */
  404: ProblemDetails;
};

export type GetApiCragByIdError = GetApiCragByIdErrors[keyof GetApiCragByIdErrors];

export type GetApiCragByIdResponses = {
  /**
   * OK
   */
  200: CragDetailedDto;
};

export type GetApiCragByIdResponse = GetApiCragByIdResponses[keyof GetApiCragByIdResponses];

export type PostApiCragData = {
  body?: CreateCragCommand;
  path?: never;
  query?: never;
  url: "/api/Crag";
};

export type PostApiCragErrors = {
  /**
   * Bad Request
   */
  400: ProblemDetails;
  /**
   * Unauthorized
   */
  401: ProblemDetails;
  /**
   * Not Found
   */
  404: ProblemDetails;
};

export type PostApiCragError = PostApiCragErrors[keyof PostApiCragErrors];

export type PostApiCragResponses = {
  /**
   * OK
   */
  200: CragDetailedDto;
};

export type PostApiCragResponse = PostApiCragResponses[keyof PostApiCragResponses];

export type GetApiMapExploreData = {
  body?: never;
  path?: never;
  query?: {
    latitude?: number;
    longitude?: number;
    radius?: number;
  };
  url: "/api/Map/explore";
};

export type GetApiMapExploreErrors = {
  /**
   * Bad Request
   */
  400: ProblemDetails;
  /**
   * Unauthorized
   */
  401: ProblemDetails;
};

export type GetApiMapExploreError = GetApiMapExploreErrors[keyof GetApiMapExploreErrors];

export type GetApiMapExploreResponses = {
  /**
   * OK
   */
  200: Array<ExploreDto>;
};

export type GetApiMapExploreResponse = GetApiMapExploreResponses[keyof GetApiMapExploreResponses];

export type GetApiMapWeatherByCragIdData = {
  body?: never;
  path: {
    cragId: string;
  };
  query?: never;
  url: "/api/Map/weather/{cragId}";
};

export type GetApiMapWeatherByCragIdErrors = {
  /**
   * Bad Request
   */
  400: ProblemDetails;
  /**
   * Unauthorized
   */
  401: ProblemDetails;
  /**
   * Not Found
   */
  404: ProblemDetails;
};

export type GetApiMapWeatherByCragIdError = GetApiMapWeatherByCragIdErrors[keyof GetApiMapWeatherByCragIdErrors];

export type GetApiMapWeatherByCragIdResponses = {
  /**
   * OK
   */
  200: WeatherResponseDto;
};

export type GetApiMapWeatherByCragIdResponse =
  GetApiMapWeatherByCragIdResponses[keyof GetApiMapWeatherByCragIdResponses];

export type GetApiRouteByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/Route/{id}";
};

export type GetApiRouteByIdErrors = {
  /**
   * Bad Request
   */
  400: ProblemDetails;
  /**
   * Unauthorized
   */
  401: ProblemDetails;
  /**
   * Not Found
   */
  404: ProblemDetails;
};

export type GetApiRouteByIdError = GetApiRouteByIdErrors[keyof GetApiRouteByIdErrors];

export type GetApiRouteByIdResponses = {
  /**
   * OK
   */
  200: RouteDetailedDto;
};

export type GetApiRouteByIdResponse = GetApiRouteByIdResponses[keyof GetApiRouteByIdResponses];

export type PostApiRouteData = {
  body?: CreateRouteCommand;
  path?: never;
  query?: never;
  url: "/api/Route";
};

export type PostApiRouteErrors = {
  /**
   * Bad Request
   */
  400: ProblemDetails;
  /**
   * Unauthorized
   */
  401: ProblemDetails;
  /**
   * Not Found
   */
  404: ProblemDetails;
};

export type PostApiRouteError = PostApiRouteErrors[keyof PostApiRouteErrors];

export type PostApiRouteResponses = {
  /**
   * OK
   */
  200: RouteDetailedDto;
};

export type PostApiRouteResponse = PostApiRouteResponses[keyof PostApiRouteResponses];

export type PostAddPhotoData = {
  body?: {
    Photo?: Blob | File;
    LinePhoto?: Blob | File;
  };
  path?: never;
  query: {
    RouteId: string;
  };
  url: "/addPhoto";
};

export type PostAddPhotoErrors = {
  /**
   * Bad Request
   */
  400: ProblemDetails;
  /**
   * Unauthorized
   */
  401: ProblemDetails;
  /**
   * Not Found
   */
  404: ProblemDetails;
};

export type PostAddPhotoError = PostAddPhotoErrors[keyof PostAddPhotoErrors];

export type PostAddPhotoResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type PostApiSearchData = {
  body?: SearchQueryCommand;
  path?: never;
  query?: never;
  url: "/api/Search";
};

export type PostApiSearchErrors = {
  /**
   * Bad Request
   */
  400: ProblemDetails;
  /**
   * Unauthorized
   */
  401: ProblemDetails;
};

export type PostApiSearchError = PostApiSearchErrors[keyof PostApiSearchErrors];

export type PostApiSearchResponses = {
  /**
   * OK
   */
  200: Array<SearchResultDto>;
};

export type PostApiSearchResponse = PostApiSearchResponses[keyof PostApiSearchResponses];

export type PostApiSectorData = {
  body?: {
    Photos?: Array<Blob | File>;
  };
  path?: never;
  query: {
    Name: string;
    Description?: string;
    "Location.Latitude": number;
    "Location.Longitude": number;
    CragId?: string;
  };
  url: "/api/Sector";
};

export type PostApiSectorErrors = {
  /**
   * Bad Request
   */
  400: ProblemDetails;
  /**
   * Unauthorized
   */
  401: ProblemDetails;
  /**
   * Not Found
   */
  404: ProblemDetails;
};

export type PostApiSectorError = PostApiSectorErrors[keyof PostApiSectorErrors];

export type PostApiSectorResponses = {
  /**
   * OK
   */
  200: SectorDetailedDto;
};

export type PostApiSectorResponse = PostApiSectorResponses[keyof PostApiSectorResponses];

export type GetApiSectorByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/Sector/{id}";
};

export type GetApiSectorByIdErrors = {
  /**
   * Bad Request
   */
  400: ProblemDetails;
  /**
   * Unauthorized
   */
  401: ProblemDetails;
  /**
   * Not Found
   */
  404: ProblemDetails;
};

export type GetApiSectorByIdError = GetApiSectorByIdErrors[keyof GetApiSectorByIdErrors];

export type GetApiSectorByIdResponses = {
  /**
   * OK
   */
  200: SectorDetailedDto;
};

export type GetApiSectorByIdResponse = GetApiSectorByIdResponses[keyof GetApiSectorByIdResponses];

export type GetApiSectorSectorCragByIdData = {
  body?: never;
  path: {
    id: string;
  };
  query?: never;
  url: "/api/Sector/sectorCrag/{id}";
};

export type GetApiSectorSectorCragByIdErrors = {
  /**
   * Bad Request
   */
  400: ProblemDetails;
  /**
   * Unauthorized
   */
  401: ProblemDetails;
  /**
   * Not Found
   */
  404: ProblemDetails;
};

export type GetApiSectorSectorCragByIdError = GetApiSectorSectorCragByIdErrors[keyof GetApiSectorSectorCragByIdErrors];

export type GetApiSectorSectorCragByIdResponses = {
  /**
   * OK
   */
  200: CragDetailedDto;
};

export type GetApiSectorSectorCragByIdResponse =
  GetApiSectorSectorCragByIdResponses[keyof GetApiSectorSectorCragByIdResponses];

export type PostApiUserLogAscentData = {
  body?: LogAscentCommand;
  path?: never;
  query?: never;
  url: "/api/User/logAscent";
};

export type PostApiUserLogAscentErrors = {
  /**
   * Bad Request
   */
  400: ProblemDetails;
  /**
   * Unauthorized
   */
  401: ProblemDetails;
  /**
   * Not Found
   */
  404: ProblemDetails;
};

export type PostApiUserLogAscentError = PostApiUserLogAscentErrors[keyof PostApiUserLogAscentErrors];

export type PostApiUserLogAscentResponses = {
  /**
   * OK
   */
  200: unknown;
};

export type GetApiUserSearchHistoryData = {
  body?: never;
  path?: never;
  query?: {
    count?: number;
  };
  url: "/api/User/searchHistory";
};

export type GetApiUserSearchHistoryErrors = {
  /**
   * Bad Request
   */
  400: ProblemDetails;
  /**
   * Unauthorized
   */
  401: ProblemDetails;
};

export type GetApiUserSearchHistoryError = GetApiUserSearchHistoryErrors[keyof GetApiUserSearchHistoryErrors];

export type GetApiUserSearchHistoryResponses = {
  /**
   * OK
   */
  200: Array<SearchResultDto>;
};

export type GetApiUserSearchHistoryResponse = GetApiUserSearchHistoryResponses[keyof GetApiUserSearchHistoryResponses];

export type GetApiUserRecentlyAscendedRoutesData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/api/User/recentlyAscendedRoutes";
};

export type GetApiUserRecentlyAscendedRoutesErrors = {
  /**
   * Bad Request
   */
  400: ProblemDetails;
  /**
   * Unauthorized
   */
  401: ProblemDetails;
};

export type GetApiUserRecentlyAscendedRoutesError =
  GetApiUserRecentlyAscendedRoutesErrors[keyof GetApiUserRecentlyAscendedRoutesErrors];

export type GetApiUserRecentlyAscendedRoutesResponses = {
  /**
   * OK
   */
  200: Array<RecentlyAscendedRouteDto>;
};

export type GetApiUserRecentlyAscendedRoutesResponse =
  GetApiUserRecentlyAscendedRoutesResponses[keyof GetApiUserRecentlyAscendedRoutesResponses];

export type GetApiUserUserByProfileUserIdData = {
  body?: never;
  path: {
    profileUserId: string;
  };
  query?: never;
  url: "/api/User/user/{profileUserId}";
};

export type GetApiUserUserByProfileUserIdErrors = {
  /**
   * Bad Request
   */
  400: ProblemDetails;
  /**
   * Unauthorized
   */
  401: ProblemDetails;
  /**
   * Not Found
   */
  404: ProblemDetails;
};

export type GetApiUserUserByProfileUserIdError =
  GetApiUserUserByProfileUserIdErrors[keyof GetApiUserUserByProfileUserIdErrors];

export type GetApiUserUserByProfileUserIdResponses = {
  /**
   * OK
   */
  200: UserProfileDto;
};

export type GetApiUserUserByProfileUserIdResponse =
  GetApiUserUserByProfileUserIdResponses[keyof GetApiUserUserByProfileUserIdResponses];

export type ClientOptions = {
  baseUrl: "https://192.168.50.175:7244" | "https://localhost:7244" | (string & {});
};
