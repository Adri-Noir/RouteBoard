// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  formDataBodySerializer,
} from "@hey-api/client-fetch";
import type {
  PostApiAuthenticationLoginData,
  PostApiAuthenticationLoginResponse,
  PostApiAuthenticationLoginError,
  PostApiAuthenticationRegisterData,
  PostApiAuthenticationRegisterResponse,
  PostApiAuthenticationRegisterError,
  PostApiAuthenticationAuthenticatedData,
  PostApiAuthenticationAuthenticatedError,
  PostApiAuthenticationMeData,
  PostApiAuthenticationMeResponse,
  PostApiAuthenticationMeError,
  DeleteApiCragByIdData,
  DeleteApiCragByIdError,
  GetApiCragByIdData,
  GetApiCragByIdResponse,
  GetApiCragByIdError,
  PutApiCragByIdData,
  PutApiCragByIdResponse,
  PutApiCragByIdError,
  PostApiCragData,
  PostApiCragResponse,
  PostApiCragError,
  PostApiCragByIdPhotoData,
  PostApiCragByIdPhotoError,
  GetApiCragByIdUsersData,
  GetApiCragByIdUsersResponse,
  GetApiCragByIdUsersError,
  PutApiCragByIdUsersData,
  PutApiCragByIdUsersError,
  GetApiDownloadCragByIdData,
  GetApiDownloadCragByIdResponse,
  GetApiDownloadCragByIdError,
  GetApiDownloadRouteByIdData,
  GetApiDownloadRouteByIdResponse,
  GetApiDownloadRouteByIdError,
  GetApiMapExploreData,
  GetApiMapExploreResponse,
  GetApiMapExploreError,
  GetApiMapWeatherByCragIdData,
  GetApiMapWeatherByCragIdResponse,
  GetApiMapWeatherByCragIdError,
  PostApiMapGlobeData,
  PostApiMapGlobeResponse,
  PostApiMapGlobeError,
  GetApiMapGlobeSectorsByCragIdData,
  GetApiMapGlobeSectorsByCragIdResponse,
  GetApiMapGlobeSectorsByCragIdError,
  DeleteApiRouteByIdData,
  DeleteApiRouteByIdError,
  GetApiRouteByIdData,
  GetApiRouteByIdResponse,
  GetApiRouteByIdError,
  PutApiRouteByIdData,
  PutApiRouteByIdResponse,
  PutApiRouteByIdError,
  PostApiRouteData,
  PostApiRouteResponse,
  PostApiRouteError,
  PostAddPhotoData,
  PostAddPhotoError,
  GetRouteAscentsByIdData,
  GetRouteAscentsByIdResponse,
  GetRouteAscentsByIdError,
  GetRoutePhotosByRouteIdData,
  GetRoutePhotosByRouteIdResponse,
  GetRoutePhotosByRouteIdError,
  PostApiSearchData,
  PostApiSearchResponse,
  PostApiSearchError,
  PostApiSectorData,
  PostApiSectorResponse,
  PostApiSectorError,
  DeleteApiSectorByIdData,
  DeleteApiSectorByIdError,
  GetApiSectorByIdData,
  GetApiSectorByIdResponse,
  GetApiSectorByIdError,
  PutApiSectorByIdData,
  PutApiSectorByIdResponse,
  PutApiSectorByIdError,
  GetApiSectorSectorCragByIdData,
  GetApiSectorSectorCragByIdResponse,
  GetApiSectorSectorCragByIdError,
  PostApiSectorByIdPhotoData,
  PostApiSectorByIdPhotoResponse,
  PostApiSectorByIdPhotoError,
  PostApiUserLogAscentData,
  PostApiUserLogAscentResponse,
  PostApiUserLogAscentError,
  GetApiUserSearchHistoryData,
  GetApiUserSearchHistoryResponse,
  GetApiUserSearchHistoryError,
  GetApiUserRecentlyAscendedRoutesData,
  GetApiUserRecentlyAscendedRoutesResponse,
  GetApiUserRecentlyAscendedRoutesError,
  GetApiUserUserByProfileUserIdData,
  GetApiUserUserByProfileUserIdResponse,
  GetApiUserUserByProfileUserIdError,
  GetApiUserUserByProfileUserIdRecentlyAscendedRoutesData,
  GetApiUserUserByProfileUserIdRecentlyAscendedRoutesResponse,
  GetApiUserUserByProfileUserIdRecentlyAscendedRoutesError,
  PutApiUserPhotoData,
  PutApiUserPhotoResponse,
  PutApiUserPhotoError,
  GetApiUserAllData,
  GetApiUserAllResponse,
  GetApiUserAllError,
  PutApiUserEditData,
  PutApiUserEditResponse,
  PutApiUserEditError,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<
  TData,
  ThrowOnError
> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const postApiAuthenticationLogin = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiAuthenticationLoginData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiAuthenticationLoginResponse,
    PostApiAuthenticationLoginError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Authentication/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postApiAuthenticationRegister = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiAuthenticationRegisterData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiAuthenticationRegisterResponse,
    PostApiAuthenticationRegisterError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Authentication/register",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

export const postApiAuthenticationAuthenticated = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiAuthenticationAuthenticatedData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<unknown, PostApiAuthenticationAuthenticatedError, ThrowOnError>({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Authentication/authenticated",
    ...options,
  });
};

export const postApiAuthenticationMe = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiAuthenticationMeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    PostApiAuthenticationMeResponse,
    PostApiAuthenticationMeError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Authentication/me",
    ...options,
  });
};

export const deleteApiCragById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiCragByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<unknown, DeleteApiCragByIdError, ThrowOnError>({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Crag/{id}",
    ...options,
  });
};

export const getApiCragById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiCragByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetApiCragByIdResponse, GetApiCragByIdError, ThrowOnError>({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Crag/{id}",
    ...options,
  });
};

export const putApiCragById = <ThrowOnError extends boolean = false>(
  options: Options<PutApiCragByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<PutApiCragByIdResponse, PutApiCragByIdError, ThrowOnError>({
    ...formDataBodySerializer,
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Crag/{id}",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

export const postApiCrag = <ThrowOnError extends boolean = false>(options?: Options<PostApiCragData, ThrowOnError>) => {
  return (options?.client ?? _heyApiClient).post<PostApiCragResponse, PostApiCragError, ThrowOnError>({
    ...formDataBodySerializer,
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Crag",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

export const postApiCragByIdPhoto = <ThrowOnError extends boolean = false>(
  options: Options<PostApiCragByIdPhotoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<unknown, PostApiCragByIdPhotoError, ThrowOnError>({
    ...formDataBodySerializer,
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Crag/{id}/photo",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

export const getApiCragByIdUsers = <ThrowOnError extends boolean = false>(
  options: Options<GetApiCragByIdUsersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetApiCragByIdUsersResponse, GetApiCragByIdUsersError, ThrowOnError>({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Crag/{id}/users",
    ...options,
  });
};

export const putApiCragByIdUsers = <ThrowOnError extends boolean = false>(
  options: Options<PutApiCragByIdUsersData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<unknown, PutApiCragByIdUsersError, ThrowOnError>({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Crag/{id}/users",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const getApiDownloadCragById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiDownloadCragByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiDownloadCragByIdResponse,
    GetApiDownloadCragByIdError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Download/crag/{id}",
    ...options,
  });
};

export const getApiDownloadRouteById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiDownloadRouteByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiDownloadRouteByIdResponse,
    GetApiDownloadRouteByIdError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Download/route/{id}",
    ...options,
  });
};

export const getApiMapExplore = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiMapExploreData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetApiMapExploreResponse, GetApiMapExploreError, ThrowOnError>({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Map/explore",
    ...options,
  });
};

export const getApiMapWeatherByCragId = <ThrowOnError extends boolean = false>(
  options: Options<GetApiMapWeatherByCragIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiMapWeatherByCragIdResponse,
    GetApiMapWeatherByCragIdError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Map/weather/{cragId}",
    ...options,
  });
};

export const postApiMapGlobe = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiMapGlobeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<PostApiMapGlobeResponse, PostApiMapGlobeError, ThrowOnError>({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Map/globe",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const getApiMapGlobeSectorsByCragId = <ThrowOnError extends boolean = false>(
  options: Options<GetApiMapGlobeSectorsByCragIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiMapGlobeSectorsByCragIdResponse,
    GetApiMapGlobeSectorsByCragIdError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Map/globe/sectors/{cragId}",
    ...options,
  });
};

export const deleteApiRouteById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiRouteByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<unknown, DeleteApiRouteByIdError, ThrowOnError>({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Route/{id}",
    ...options,
  });
};

export const getApiRouteById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiRouteByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetApiRouteByIdResponse, GetApiRouteByIdError, ThrowOnError>({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Route/{id}",
    ...options,
  });
};

export const putApiRouteById = <ThrowOnError extends boolean = false>(
  options: Options<PutApiRouteByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<PutApiRouteByIdResponse, PutApiRouteByIdError, ThrowOnError>({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Route/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postApiRoute = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiRouteData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<PostApiRouteResponse, PostApiRouteError, ThrowOnError>({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Route",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postAddPhoto = <ThrowOnError extends boolean = false>(
  options?: Options<PostAddPhotoData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<unknown, PostAddPhotoError, ThrowOnError>({
    ...formDataBodySerializer,
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/addPhoto",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

export const getRouteAscentsById = <ThrowOnError extends boolean = false>(
  options: Options<GetRouteAscentsByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetRouteAscentsByIdResponse, GetRouteAscentsByIdError, ThrowOnError>({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/routeAscents/{id}",
    ...options,
  });
};

export const getRoutePhotosByRouteId = <ThrowOnError extends boolean = false>(
  options: Options<GetRoutePhotosByRouteIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetRoutePhotosByRouteIdResponse,
    GetRoutePhotosByRouteIdError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/routePhotos/{routeId}",
    ...options,
  });
};

export const postApiSearch = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiSearchData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<PostApiSearchResponse, PostApiSearchError, ThrowOnError>({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Search",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

export const postApiSector = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiSectorData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<PostApiSectorResponse, PostApiSectorError, ThrowOnError>({
    ...formDataBodySerializer,
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Sector",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

export const deleteApiSectorById = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiSectorByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<unknown, DeleteApiSectorByIdError, ThrowOnError>({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Sector/{id}",
    ...options,
  });
};

export const getApiSectorById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiSectorByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<GetApiSectorByIdResponse, GetApiSectorByIdError, ThrowOnError>({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Sector/{id}",
    ...options,
  });
};

export const putApiSectorById = <ThrowOnError extends boolean = false>(
  options: Options<PutApiSectorByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<PutApiSectorByIdResponse, PutApiSectorByIdError, ThrowOnError>({
    ...formDataBodySerializer,
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Sector/{id}",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

export const getApiSectorSectorCragById = <ThrowOnError extends boolean = false>(
  options: Options<GetApiSectorSectorCragByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiSectorSectorCragByIdResponse,
    GetApiSectorSectorCragByIdError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Sector/sectorCrag/{id}",
    ...options,
  });
};

export const postApiSectorByIdPhoto = <ThrowOnError extends boolean = false>(
  options: Options<PostApiSectorByIdPhotoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiSectorByIdPhotoResponse,
    PostApiSectorByIdPhotoError,
    ThrowOnError
  >({
    ...formDataBodySerializer,
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/Sector/{id}/photo",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

export const postApiUserLogAscent = <ThrowOnError extends boolean = false>(
  options?: Options<PostApiUserLogAscentData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<PostApiUserLogAscentResponse, PostApiUserLogAscentError, ThrowOnError>(
    {
      security: [
        {
          name: "Authorization",
          type: "apiKey",
        },
      ],
      url: "/api/User/logAscent",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    },
  );
};

export const getApiUserSearchHistory = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiUserSearchHistoryData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiUserSearchHistoryResponse,
    GetApiUserSearchHistoryError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/User/searchHistory",
    ...options,
  });
};

export const getApiUserRecentlyAscendedRoutes = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiUserRecentlyAscendedRoutesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiUserRecentlyAscendedRoutesResponse,
    GetApiUserRecentlyAscendedRoutesError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/User/recentlyAscendedRoutes",
    ...options,
  });
};

export const getApiUserUserByProfileUserId = <ThrowOnError extends boolean = false>(
  options: Options<GetApiUserUserByProfileUserIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiUserUserByProfileUserIdResponse,
    GetApiUserUserByProfileUserIdError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/User/user/{profileUserId}",
    ...options,
  });
};

export const getApiUserUserByProfileUserIdRecentlyAscendedRoutes = <ThrowOnError extends boolean = false>(
  options: Options<GetApiUserUserByProfileUserIdRecentlyAscendedRoutesData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiUserUserByProfileUserIdRecentlyAscendedRoutesResponse,
    GetApiUserUserByProfileUserIdRecentlyAscendedRoutesError,
    ThrowOnError
  >({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/User/user/{profileUserId}/recentlyAscendedRoutes",
    ...options,
  });
};

export const putApiUserPhoto = <ThrowOnError extends boolean = false>(
  options?: Options<PutApiUserPhotoData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).put<PutApiUserPhotoResponse, PutApiUserPhotoError, ThrowOnError>({
    ...formDataBodySerializer,
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/User/photo",
    ...options,
    headers: {
      "Content-Type": null,
      ...options?.headers,
    },
  });
};

export const getApiUserAll = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiUserAllData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<GetApiUserAllResponse, GetApiUserAllError, ThrowOnError>({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/User/all",
    ...options,
  });
};

export const putApiUserEdit = <ThrowOnError extends boolean = false>(
  options?: Options<PutApiUserEditData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).put<PutApiUserEditResponse, PutApiUserEditError, ThrowOnError>({
    security: [
      {
        name: "Authorization",
        type: "apiKey",
      },
    ],
    url: "/api/User/edit",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};
