// <auto-generated />
using System;
using Alpinity.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace Alpinity.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250301231637_add_search_history_entity")]
    partial class add_search_history_entity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Alpinity.Domain.Entities.Ascent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("AscentDate")
                        .HasColumnType("date");

                    b.Property<int?>("AscentType")
                        .HasColumnType("int");

                    b.Property<string>("ClimbTypes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HoldTypes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("NumberOfAttempts")
                        .HasColumnType("int");

                    b.Property<int?>("ProposedGrade")
                        .HasColumnType("int");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("RockTypes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RouteId");

                    b.HasIndex("UserId");

                    b.ToTable("Ascents");
                });

            modelBuilder.Entity("Alpinity.Domain.Entities.Crag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Crags");
                });

            modelBuilder.Entity("Alpinity.Domain.Entities.Photo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CragId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid?>("RouteImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoutePathLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TakenAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TakenByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("UserPhotoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CragId");

                    b.HasIndex("SectorId");

                    b.HasIndex("TakenByUserId");

                    b.HasIndex("UserPhotoId")
                        .IsUnique()
                        .HasFilter("[UserPhotoId] IS NOT NULL");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Alpinity.Domain.Entities.Route", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("Grade")
                        .HasColumnType("int");

                    b.Property<int?>("Length")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RouteType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SectorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SectorId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Alpinity.Domain.Entities.RoutePhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PathLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex("PathLineId")
                        .IsUnique();

                    b.HasIndex("RouteId");

                    b.ToTable("RoutePhotos");
                });

            modelBuilder.Entity("Alpinity.Domain.Entities.SearchHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CragId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfileUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RouteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SearchedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SearchingUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SectorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CragId");

                    b.HasIndex("ProfileUserId");

                    b.HasIndex("RouteId");

                    b.HasIndex("SearchingUserId");

                    b.HasIndex("SectorId");

                    b.ToTable("SearchHistories");
                });

            modelBuilder.Entity("Alpinity.Domain.Entities.Sector", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CragId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CragId");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("Alpinity.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Alpinity.Domain.Entities.Ascent", b =>
                {
                    b.HasOne("Alpinity.Domain.Entities.Route", "Route")
                        .WithMany("Ascents")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alpinity.Domain.Entities.User", "User")
                        .WithMany("Ascents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Route");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Alpinity.Domain.Entities.Photo", b =>
                {
                    b.HasOne("Alpinity.Domain.Entities.Crag", "Crag")
                        .WithMany("Photos")
                        .HasForeignKey("CragId");

                    b.HasOne("Alpinity.Domain.Entities.Sector", "Sector")
                        .WithMany("Photos")
                        .HasForeignKey("SectorId");

                    b.HasOne("Alpinity.Domain.Entities.User", "TakenByUser")
                        .WithMany("TakenPhotos")
                        .HasForeignKey("TakenByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alpinity.Domain.Entities.User", "UserPhoto")
                        .WithOne("ProfilePhoto")
                        .HasForeignKey("Alpinity.Domain.Entities.Photo", "UserPhotoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Crag");

                    b.Navigation("Sector");

                    b.Navigation("TakenByUser");

                    b.Navigation("UserPhoto");
                });

            modelBuilder.Entity("Alpinity.Domain.Entities.Route", b =>
                {
                    b.HasOne("Alpinity.Domain.Entities.Sector", "Sector")
                        .WithMany("Routes")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Alpinity.Domain.Entities.RoutePhoto", b =>
                {
                    b.HasOne("Alpinity.Domain.Entities.Photo", "Image")
                        .WithOne("RouteImage")
                        .HasForeignKey("Alpinity.Domain.Entities.RoutePhoto", "ImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Alpinity.Domain.Entities.Photo", "PathLine")
                        .WithOne("RoutePathLine")
                        .HasForeignKey("Alpinity.Domain.Entities.RoutePhoto", "PathLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alpinity.Domain.Entities.Route", "Route")
                        .WithMany("RoutePhotos")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("PathLine");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Alpinity.Domain.Entities.SearchHistory", b =>
                {
                    b.HasOne("Alpinity.Domain.Entities.Crag", "Crag")
                        .WithMany()
                        .HasForeignKey("CragId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alpinity.Domain.Entities.User", "ProfileUser")
                        .WithMany()
                        .HasForeignKey("ProfileUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alpinity.Domain.Entities.Route", "Route")
                        .WithMany()
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Alpinity.Domain.Entities.User", "SearchingUser")
                        .WithMany()
                        .HasForeignKey("SearchingUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Alpinity.Domain.Entities.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Crag");

                    b.Navigation("ProfileUser");

                    b.Navigation("Route");

                    b.Navigation("SearchingUser");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Alpinity.Domain.Entities.Sector", b =>
                {
                    b.HasOne("Alpinity.Domain.Entities.Crag", "Crag")
                        .WithMany("Sectors")
                        .HasForeignKey("CragId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crag");
                });

            modelBuilder.Entity("Alpinity.Domain.Entities.Crag", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Sectors");
                });

            modelBuilder.Entity("Alpinity.Domain.Entities.Photo", b =>
                {
                    b.Navigation("RouteImage");

                    b.Navigation("RoutePathLine");
                });

            modelBuilder.Entity("Alpinity.Domain.Entities.Route", b =>
                {
                    b.Navigation("Ascents");

                    b.Navigation("RoutePhotos");
                });

            modelBuilder.Entity("Alpinity.Domain.Entities.Sector", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Routes");
                });

            modelBuilder.Entity("Alpinity.Domain.Entities.User", b =>
                {
                    b.Navigation("Ascents");

                    b.Navigation("ProfilePhoto");

                    b.Navigation("TakenPhotos");
                });
#pragma warning restore 612, 618
        }
    }
}
